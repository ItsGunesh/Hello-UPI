# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14NaOA8S8XrjuA2QGWTw_yq_r7QueiueC
"""

import pandas as pd
import numpy as np
import re
import spacy
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import joblib

# Load the SpaCy model
nlp = spacy.load("en_core_web_md")

# Load the dataset
data = pd.read_csv('/content/dataset.csv') # Changed the path to '/content/dataset.csv'

# Data Preprocessing
def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r'\d+', '{amount}', text)  # Replace digits with placeholder
    text = re.sub(r'rs|rupees|dollars', '{currency}', text)  # Replace currencies with placeholder
    text = re.sub(r'\b[a-zA-Z]+\b', '{receiver}', text)  # Replace receiver names with placeholder
    return text

data['cleaned_sentence'] = data['sentence'].apply(preprocess_text)

# Features and Labels
X = data['cleaned_sentence']
y = data['label']

# Convert text data to numerical features using embeddings
X_embeddings = np.vstack([nlp(sentence).vector for sentence in X])

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X_embeddings, y, test_size=0.2, random_state=42)

# Train a RandomForest Classifier
model = RandomForestClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("F1-score:", f1_score(y_test, y_pred))

# Save the model
joblib.dump(model, "model.pkl")
print("Model saved as model.pkl")

from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Generate the confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Plot the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Transaction', 'Transaction'], yticklabels=['Not Transaction', 'Transaction'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Print the classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=['Not Transaction', 'Transaction']))

